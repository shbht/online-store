{"version":3,"sources":["../lib/api.es6"],"names":["NODE_ENV","process","env","nodeEnv","config","Object","freeze","require","app","authSecretKey","set","use","json","urlencoded","unless","req","res","status","send","listen","console","log","Date","module","exports"],"mappings":"AAAA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEI,IAACA,QAAD,GAAaC,QAAQC,GAArB,CAACF,QAAD;AAAA,IACFG,OADE,GACQH,YAAY,OADpB;AAAA,IAEFI,MAFE,GAEOC,OAAOC,MAAP,CAAcC,QAAQ,eAAeJ,OAAvB,CAAd,CAFP;AAAA,IAGFK,GAHE,GAGI,wBAHJ;AAAA,IAIDC,aAJC,GAIgBL,MAJhB,CAIDK,aAJC;;;AAMJD,IAAIE,GAAJ,CAAQ,aAAR,EAAuBD,aAAvB;;AAEAD,IAAIG,GAAJ,CAAQ,qBAAWC,IAAX,EAAR;AACAJ,IAAIG,GAAJ,CAAQ,qBAAWE,UAAX,CAAsB,EAAC,YAAY,IAAb,EAAtB,CAAR;;AAEAL,IAAIG,GAAJ,CAAQ,0BAAW,EAAC,UAAUF,aAAX,EAAX,EAAsCK,MAAtC,CACN;AACE,UAAQ,CACN,OADM,EAEN,aAFM,EAGN,cAHM;AADV,CADM,CAAR;;AAUAN,IAAIG,GAAJ,CAAQ,cAAR,EAAwB,UAACI,GAAD,EAAMC,GAAN,EAAc;AACpCA,MAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,IAArB;AACD,CAFD;;AAIAV,IAAIG,GAAJ,CAAQ,OAAR;AACAH,IAAIG,GAAJ,CAAQ,UAAR;;AAEAH,IAAIG,GAAJ;AACAH,IAAIG,GAAJ;;AAEAH,IAAIW,MAAJ,CAAW,IAAX,EAAiB,YAAM;AACrBC,UAAQC,GAAR,qCAA8C,IAAIC,IAAJ,EAA9C;AACD,CAFD;;AAIAC,OAAOC,OAAP,GAAiBhB,GAAjB","file":"api.js","sourcesContent":["\"use strict\";\n\nimport express from \"express\";\nimport bodyParser from \"body-parser\";\nimport methodOverride from \"method-override\";\nimport product from \"./endpoints/product\";\nimport user from \"./endpoints/user\";\nimport mwErrorHandler from \"./middleware/mwErrorHandler\";\nimport expressJwt from \"express-jwt\";\n\nlet {NODE_ENV} = process.env,\n  nodeEnv = NODE_ENV || \"local\",\n  config = Object.freeze(require(\"../config/\" + nodeEnv)),\n  app = express(),\n  {authSecretKey} = config;\n\napp.set(\"tokenSecret\", authSecretKey);\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({\"extended\": true}));\n\napp.use(expressJwt({\"secret\": authSecretKey}).unless(\n  {\n    \"path\": [\n      \"/user\",\n      \"/user/login\",\n      \"/healthcheck\"\n    ]\n  }\n));\n\napp.use(\"/healthcheck\", (req, res) => {\n  res.status(200).send(\"OK\");\n});\n\napp.use(\"/user\", user);\napp.use(\"/product\", product);\n\napp.use(methodOverride);\napp.use(mwErrorHandler);\n\napp.listen(3000, () => {\n  console.log(`Server has started at datetime ${new Date()} and is listening on port: 3000`);\n});\n\nmodule.exports = app;\n"]}