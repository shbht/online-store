{"version":3,"sources":["../../../lib/endpoints/user/UserService.es6"],"names":["UserService","config","console","log","dbSerivce","req","res","collection","encryptedPassword","createHash","update","body","password","digest","query","userName","secret","app","get","JSON","stringify","read","then","createToken","bind","status","send","token","catch","err","payload","claims","name","defer","sign","error","resolve","reject","promise","document","Date","insert"],"mappings":"AAAA;;;;;;;;;AAEA;;AACA;;;;AACA;;;;AACA;;;;;;;;IAEaA,W,WAAAA,W;AAEX,uBAAYC,MAAZ,EAAoB;AAAA;;AAClBC,YAAQC,GAAR,CAAY,iCAAZ;AACA,SAAKC,SAAL,GAAiB,yCAAsBH,MAAtB,CAAjB;AACD;;;;0BAEKI,G,EAAKC,G,EAAK;AACd,UAAIC,aAAa,MAAjB;AAAA,UACEC,oBAAoB,iBACjBC,UADiB,CACN,KADM,EAEjBC,MAFiB,CAEVL,IAAIM,IAAJ,CAASC,QAFC,EAGjBC,MAHiB,CAGV,KAHU,CADtB;AAAA,UAKEC,QAAQ;AACN,gBAAQ;AACN,sBAAYT,IAAIM,IAAJ,CAASI,QADf;AAEN,sBAAYP;AAFN;AADF,OALV;AAAA,UAWEQ,SAASX,IAAIY,GAAJ,CAAQC,GAAR,CAAY,aAAZ,CAXX;;AAaAhB,cAAQC,GAAR,CAAY,eAAZ,EAA6BgB,KAAKC,SAAL,CAAeN,KAAf,CAA7B;;AAEA,WAAKV,SAAL,CAAeiB,IAAf,CAAoB,EAACd,sBAAD,EAAaO,YAAb,EAApB,EACGQ,IADH,CACQ,KAAKC,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,EAA4B,EAAC,YAAYnB,IAAIM,IAAJ,CAASI,QAAtB,EAA5B,EAA6DC,MAA7D,EAAqE,EAArE,CADR,EAEGM,IAFH,CAEQ,iBAAS;AACbhB,YAAImB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,KAArB;AACD,OAJH,EAKGC,KALH,CAKS,eAAO;AACZ1B,gBAAQC,GAAR,CAAY,QAAZ,EAAsB0B,GAAtB;AACA,cAAMA,GAAN;AACD,OARH;AASD;;;gCAEWC,O,EAASd,M,EAAQe,M,EAAQ;AACnC7B,cAAQC,GAAR,UAAmBH,YAAYgC,IAA/B;AACA,UAAIC,QAAQ,YAAEA,KAAF,EAAZ;;AAEA,6BAAIC,IAAJ,CAASJ,OAAT,EAAkBd,MAAlB,EAA0Be,MAA1B,EAAkC,UAACI,KAAD,EAAQR,KAAR,EAAkB;AAClD,YAAI,CAACQ,KAAL,EAAY;AACVjC,kBAAQC,GAAR,CAAY,iBAAZ;AACA8B,gBAAMG,OAAN,CAAcT,KAAd;AACD,SAHD,MAGM;AACJzB,kBAAQC,GAAR,CAAY,qBAAZ,EAAmCgC,KAAnC;AACAF,gBAAMI,MAAN,CAAaF,KAAb;AACD;AACF,OARD;AASA,aAAOF,MAAMK,OAAb;AACD;;;+BAEUjC,G,EAAKC,G,EAAK;AACnBJ,cAAQC,GAAR,CAAY,oBAAZ;;AAEA,UAAII,aAAa,MAAjB;AAAA,UACEgC,WAAW;AACT,gBAAQlC,IAAIM,IAAJ,CAASqB,IADR;AAET,oBAAY3B,IAAIM,IAAJ,CAASI,QAFZ;AAGT,oBAAYV,IAAIM,IAAJ,CAASC,QAHZ;AAIT,qBAAa,IAAI4B,IAAJ,EAJJ;AAKT,qBAAa,IAAIA,IAAJ;AALJ,OADb;;AASA,WAAKpC,SAAL,CAAeqC,MAAf,CAAsB,EAAClC,sBAAD,EAAagC,kBAAb,EAAtB,EACGjB,IADH,CACQ,YAAM;AACVpB,gBAAQC,GAAR,CAAY,uBAAZ;AACAG,YAAImB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,IAArB;AACD,OAJH,EAKGE,KALH,CAKS,eAAO;AACZ1B,gBAAQC,GAAR,CAAY,QAAZ,EAAsB0B,GAAtB;AACA,cAAMA,GAAN;AACD,OARH;AASD","file":"UserService.js","sourcesContent":["\"use strict\";\n\nimport {GenericRepository} from \"../../generic/GenericRepository\";\nimport crypto from \"crypto\";\nimport jwt from \"jsonwebtoken\";\nimport Q from \"q\";\n\nexport class UserService {\n\n  constructor(config) {\n    console.log(\"inside user service constructor\");\n    this.dbSerivce = new GenericRepository(config);\n  }\n\n  login(req, res) {\n    let collection = \"user\",\n      encryptedPassword = crypto\n        .createHash(\"md5\")\n        .update(req.body.password)\n        .digest(\"hex\"),\n      query = {\n        \"body\": {\n          \"userName\": req.body.userName,\n          \"password\": encryptedPassword\n        }\n      },\n      secret = req.app.get(\"tokenSecret\");\n\n    console.log(\"search query \", JSON.stringify(query));\n\n    this.dbSerivce.read({collection, query})\n      .then(this.createToken.bind(this, {\"userName\": req.body.userName}, secret, {}))\n      .then(token => {\n        res.status(200).send(token);\n      })\n      .catch(err => {\n        console.log(\"Error \", err);\n        throw err;\n      });\n  }\n\n  createToken(payload, secret, claims) {\n    console.log(`$$$ ${UserService.name} createToken() call`);\n    let defer = Q.defer();\n\n    jwt.sign(payload, secret, claims, (error, token) => {\n      if (!error) {\n        console.log(\"Token Generated\");\n        defer.resolve(token);\n      }else {\n        console.log(\"token not generated\", error);\n        defer.reject(error);\n      }\n    });\n    return defer.promise;\n  }\n\n  createUser(req, res) {\n    console.log(\"inside create user\");\n\n    let collection = \"user\",\n      document = {\n        \"name\": req.body.name,\n        \"userName\": req.body.userName,\n        \"password\": req.body.password,\n        \"createdAt\": new Date(),\n        \"updatedAt\": new Date()\n      };\n\n    this.dbSerivce.insert({collection, document})\n      .then(() => {\n        console.log(\"inserted successfully\");\n        res.status(200).send(\"Ok\");\n      })\n      .catch(err => {\n        console.log(\"error \", err);\n        throw err;\n      });\n  }\n}\n"]}