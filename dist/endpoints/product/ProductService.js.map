{"version":3,"sources":["../../../lib/endpoints/product/ProductService.es6"],"names":["ProductService","config","console","log","dbSerivce","req","res","collection","document","body","name","description","supplier","status","Date","insert","then","send","catch","err","query","params","id","remove","read","list","JSON","stringify","product","update"],"mappings":"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","file":"ProductService.js","sourcesContent":["\"use strict\";\n\nimport {GenericRepository} from \"../../generic/GenericRepository\";\n\nexport class ProductService {\n\n  constructor(config) {\n    console.log(\"inside product constructor\");\n    this.dbSerivce = new GenericRepository(config);\n  }\n\n  insert(req, res) {\n    console.log(\"inside insert\");\n    let collection = \"product\",\n      document = {\n        \"name\": req.body.name,\n        \"description\": req.body.description,\n        \"supplier\": req.body.supplier,\n        \"status\": req.body.status,\n        \"createdAt\": new Date(),\n        \"updatedAt\": new Date()\n      };\n\n    this.dbSerivce.insert({collection, document})\n      .then(() => {\n        console.log(\"inserted successfully\");\n        res.status(200).send(\"Ok\");\n      })\n      .catch(err => {\n        console.log(\"error \", err);\n        throw err;\n      });\n  }\n\n  remove(req, res) {\n    let collection = \"product\",\n      query = {\n        \"_id\": req.params.id\n      };\n\n    this.dbSerivce.remove({collection, query})\n      .then(() => {\n        res.status(200).send();\n      })\n      .catch(err => {\n        throw err;\n      });\n  }\n\n  listAll(req, res) {\n    let collection = \"product\",\n      query = {\n        \"body\": {}\n      };\n\n    this.dbSerivce.read({collection, query})\n      .then(list => {\n        res.status(200).send(list);\n      })\n      .catch(err => {\n        throw err;\n      });\n  }\n\n  search(req, res) {\n    let collection = \"product\",\n      query = {\n        \"body\": {\n          \"_id\": req.params.id\n        }\n      };\n\n    console.log(\"search query \", JSON.stringify(query));\n\n    this.dbSerivce.read({collection, query})\n      .then(product => {\n        res.status(200).send(product);\n      })\n      .catch(err => {\n        throw err;\n      });\n  }\n\n  update(req, res) {\n    let collection = \"product\",\n      query = {\n        \"_id\": req.params.id\n      },\n      document = {\n        \"$set\": {\"status\": req.body.status,\n          \"updatedAt\": new Date()\n        }\n      };\n\n    this.dbSerivce.update({collection, query, document})\n      .then(() => {\n        res.status(200).send();\n      })\n      .catch(err => {\n        throw err;\n      });\n  }\n}\n"]}