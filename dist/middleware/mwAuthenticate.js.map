{"version":3,"sources":["../../lib/middleware/mwAuthenticate.es6"],"names":["mwAuthenticate","req","res","next","NODE_ENV","process","env","nodeEnv","config","Object","freeze","require","secret","app","get","jwtInstance","tokenRegex","RegExp","token","header","authorization","authorize","console","log","Error","id","test","err","split","verifyToken","then","data","iss","user","failure"],"mappings":"AAAA;;;;;;AAEA;;;;;;AAEA,SAASA,cAAT,CAAwBC,GAAxB,EAA6BC,GAA7B,EAAkCC,IAAlC,EAAwC;AAElC,MAACC,QAAD,GAAaC,QAAQC,GAArB,CAACF,QAAD;AAAA,MACFG,OADE,GACQH,YAAY,OADpB;AAAA,MAEFI,MAFE,GAEOC,OAAOC,MAAP,CAAcC,QAAQ,kBAAkBJ,OAA1B,CAAd,CAFP;AAAA,MAGFK,MAHE,GAGOX,IAAIY,GAAJ,CAAQC,GAAR,CAAY,WAAZ,CAHP;AAAA,MAIFC,WAJE,GAIY,+BAAQH,MAAR,CAJZ;AAAA,MAKFI,UALE,GAKW,IAAIC,MAAJ,CAAW,gBAAX,CALX;AAAA,MAMFC,KANE,GAMMjB,IAAIkB,MAAJ,CAAW,eAAX,CANN;;;AAQJ,MAAI,CAACX,OAAOY,aAAP,CAAqBC,SAA1B,EAAqC;AACnCC,YAAQC,GAAR,CAAY,4CAAZ;;AAEA,WAAOpB,KAAK,IAAIqB,KAAJ,CAAUvB,IAAIwB,EAAd,EAAkB,WAAlB,EAA+B,mCACzC,+BADU,EACuB,EADvB,EAC2B,GAD3B,CAAL,CAAP;AAED;;AAED,MAAI,CAACP,KAAD,IAAU,CAACF,WAAWU,IAAX,CAAgBR,KAAhB,CAAf,EAAuC;AACrCI,YAAQC,GAAR,CAAY,sDAAZ;AACA,QAAII,MAAM,IAAIH,KAAJ,CAAUvB,IAAIwB,EAAd,EAAkB,cAAlB,EAAkC,iDAAlC,EAAqF,GAArF,CAAV;;AAEA,WAAOtB,KAAKwB,GAAL,CAAP;AACD;;AAEDT,UAAQA,MAAMU,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAR;;AAEAN,UAAQC,GAAR,CAAY,YAAZ,EAA0BL,KAA1B;;AAEAH,cACGc,WADH,CACeX,KADf,EAEGY,IAFH,CAEQ,gBAAQ;AACZ,QAAIC,KAAKC,GAAL,KAAa,aAAjB,EAAgC;AAC9BV,cAAQC,GAAR,CAAY,sEAAZ;AACA,UAAII,OAAM,IAAIH,KAAJ,CAAUvB,IAAIwB,EAAd,EAAkB,cAAlB,EAAkC,iDAAlC,EAAqF,GAArF,CAAV;;AAEA,aAAOtB,KAAKwB,IAAL,CAAP;AACD;;AAEDL,YAAQC,GAAR,CAAY,qDAAZ,EAAmEQ,IAAnE;AACA9B,QAAIgC,IAAJ,GAAWF,IAAX;AACAT,YAAQC,GAAR,CAAY,4BAAZ,EAA0CtB,IAAIgC,IAA9C;AACA,WAAO9B,MAAP;AAED,GAfH,EAeK,mBAAW;AACZmB,YAAQC,GAAR,CAAY,qCAAZ,EAAmDW,OAAnD;AACA,WAAO/B,KAAK,IAAIqB,KAAJ,CAAUvB,IAAIwB,EAAd,EAAkB,aAAlB,EAAiC,2BAAjC,EAA8D,EAA9D,EAAkE,GAAlE,CAAL,CAAP;AACD,GAlBH;AAmBD;;kBAEczB,c","file":"mwAuthenticate.js","sourcesContent":["\"use strict\";\n\nimport JWT from \"../util/JWTImplementaion\";\n\nfunction mwAuthenticate(req, res, next) {\n\n  let {NODE_ENV} = process.env,\n    nodeEnv = NODE_ENV || \"local\",\n    config = Object.freeze(require(\"../../config/\" + nodeEnv)),\n    secret = req.app.get(\"secretKey\"),\n    jwtInstance = new JWT(secret),\n    tokenRegex = new RegExp(\"^(b|B)earer\\\\s\"),\n    token = req.header(\"Authorization\");\n\n  if (!config.authorization.authorize) {\n    console.log(\"Authentication is disabled by confguration\");\n\n    return next(new Error(req.id, \"Forbidden\", \"Server understood the request \" +\n      \"but is refusing to fulfill it\", \"\", 403));\n  }\n\n  if (!token || !tokenRegex.test(token)) {\n    console.log(\"Authentication credentials were missing or incorrect\");\n    let err = new Error(req.id, \"Unauthorized\", \"Authentication credentials missing or incorrect\", 401);\n\n    return next(err);\n  }\n\n  token = token.split(\" \")[1];\n\n  console.log(\"token ==> \", token);\n\n  jwtInstance\n    .verifyToken(token)\n    .then(data => {\n      if (data.iss !== \"node-bridge\") {\n        console.log(\"Authentication credentials are incorrect. Issuer cannot be verified.\");\n        let err = new Error(req.id, \"Unauthorized\", \"Authentication credentials missing or incorrect\", 401);\n\n        return next(err);\n      }\n\n      console.log(\"Authentication Token verification done successfully\", data);\n      req.user = data;\n      console.log(\"Authentication Token added\", req.user);\n      return next();\n\n    }, failure => {\n      console.log(\"Unable to verify the supplied token\", failure);\n      return next(new Error(req.id, \"Bad Request\", \"Token Verification Failed\", \"\", 400));\n    });\n}\n\nexport default mwAuthenticate;\n"]}