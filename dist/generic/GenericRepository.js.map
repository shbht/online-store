{"version":3,"sources":["../../lib/generic/GenericRepository.es6"],"names":["GenericRepository","config","mongoDb","connectionString","Error","connectionString_","dbConnection_","connectToDB","ninvoke","catch","then","dbConn","query","fields","limit","skip","sort","collection","options","push","body","readQuery","getMongoDBObject","npost","db","cursor","results","document","_id","v1"],"mappings":"AAAA;;;;;;;;;AAEA;;AACA;;;;AACA;;;;;;;;IAEaA,iB,WAAAA,iB;AAEX,6BAAYC,MAAZ,EAAoB;AAAA;;AAClB,QAAI,CAACA,MAAD,IAAW,CAACA,OAAOC,OAAP,CAAeC,gBAA/B,EAAiD;AAC/C,YAAM,IAAIC,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAED,SAAKC,iBAAL,GAAyBJ,OAAOC,OAAP,CAAeC,gBAAxC;;AAEA,SAAKG,aAAL,GAAqB,KAAKC,WAAL,EAArB;AACD;;AAED;;;;;;;;;kCAKc;AACZ,WAAKD,aAAL,GAAqB,YAAEE,OAAF,uBAAuB,SAAvB,EAAkC,KAAKH,iBAAvC,CAArB;AACA,aAAO,KAAKC,aAAZ;AACD;;AAED;;;;;;;uCAImB;AAAA;;AAEjB,aAAO,KAAKA,aAAL,CACJG,KADI,CACE,YAAM;AACX,eAAO,MAAKF,WAAL,EAAP;AACD,OAHI,EAIJG,IAJI,CAIC,kBAAU;AACd,eAAOC,MAAP;AACD,OANI,CAAP;AAOD;;AAED;;;;;;;8BAIUC,K,EAAO;;AAEf,aAAO;AACL,kBAAUA,MAAMC,MAAN,IAAgB,EADrB;AAEL,iBAASD,MAAME,KAAN,IAAe,CAFnB;AAGL,gBAAQF,MAAMG,IAAN,IAAc,CAHjB;AAIL,gBAAQH,MAAMI,IAAN,IAAc;AAJjB,OAAP;AAMD;;AAED;;;;;;;;+BAK0B;AAAA,UAApBC,UAAoB,QAApBA,UAAoB;AAAA,UAARL,KAAQ,QAARA,KAAQ;;;AAExB,UAAIM,UAAU,EAAd;;AAEAA,cAAQC,IAAR,CAAaP,MAAMQ,IAAnB;AACAF,cAAQC,IAAR,CAAa,KAAKE,SAAL,CAAeT,KAAf,CAAb;;AAEA,aAAO,KAAKU,gBAAL,GACJZ,IADI,CACC,cAAM;AACV,eAAO,YAAEa,KAAF,CACLC,GAAGP,UAAH,CAAcA,UAAd,CADK,EACsB,MADtB,EAC8BC,OAD9B,EAGJR,IAHI,CAGC,kBAAU;AACd,iBAAO,YAAEF,OAAF,CAAUiB,MAAV,EAAkB,SAAlB,EAEJf,IAFI,CAEC,mBAAW;AACf,mBAAOgB,OAAP;AACD,WAJI,CAAP;AAKD,SATI,CAAP;AAUD,OAZI,CAAP;AAaD;;AAED;;;;;;;;;kCAO+B;AAAA,UAAvBT,UAAuB,SAAvBA,UAAuB;AAAA,UAAXU,QAAW,SAAXA,QAAW;;AAC7BA,eAASC,GAAT,GAAe,mBAASC,EAAT,EAAf;;AAEA,aAAO,KAAKP,gBAAL,GACJZ,IADI,CACC,cAAM;AACV,eAAO,YAAEF,OAAF,CAAUgB,GAAGP,UAAH,CAAcA,UAAd,CAAV,EAAqC,QAArC,EAA+CU,QAA/C,CAAP;AACD,OAHI,CAAP;AAID;;AAED;;;;;;;;kCAK4B;AAAA,UAApBV,UAAoB,SAApBA,UAAoB;AAAA,UAARL,KAAQ,SAARA,KAAQ;;;AAE1B,aAAO,KAAKU,gBAAL,GACJZ,IADI,CACC,cAAM;AACV,eAAO,YAAEF,OAAF,CACLgB,GAAGP,UAAH,CAAcA,UAAd,CADK,EACsB,QADtB,EACgCL,KADhC,CAAP;AAGD,OALI,CAAP;AAMD","file":"GenericRepository.js","sourcesContent":["\"use strict\";\n\nimport {MongoClient} from \"mongodb\";\nimport Q from \"q\";\nimport nodeUuid from \"node-uuid\";\n\nexport class GenericRepository {\n\n  constructor(config) {\n    if (!config || !config.mongoDb.connectionString) {\n      throw new Error(\"MongoDB connection string not available\");\n    }\n\n    this.connectionString_ = config.mongoDb.connectionString;\n\n    this.dbConnection_ = this.connectToDB();\n  }\n\n  /**\n   * Create connection to the mongodb database.\n   * @private\n   * @returns {Q.Promise} A promise which resolves the connection to the mongodb client.\n   */\n  connectToDB() {\n    this.dbConnection_ = Q.ninvoke(MongoClient, \"connect\", this.connectionString_);\n    return this.dbConnection_;\n  }\n\n  /**\n   * function for creating the mongodb object.\n   * @returns {object} mongodb object after creating the connection.\n   */\n  getMongoDBObject() {\n\n    return this.dbConnection_\n      .catch(() => {\n        return this.connectToDB();\n      })\n      .then(dbConn => {\n        return dbConn;\n      });\n  }\n\n  /**\n   *@param {object} query read query\n   *@returns {object} returns promise for read query\n   */\n  readQuery(query) {\n\n    return {\n      \"fields\": query.fields || {},\n      \"limit\": query.limit || 0,\n      \"skip\": query.skip || 0,\n      \"sort\": query.sort || {}\n    };\n  }\n\n  /**\n   *@param {string} collection collection to be used for query\n   *@param {object} query query object which contains body(filter query), fields, limit, skip, sort fields\n   *@returns {Q.Promise} returns promise for read query\n   */\n  read({collection, query}) {\n\n    let options = [];\n\n    options.push(query.body);\n    options.push(this.readQuery(query));\n\n    return this.getMongoDBObject()\n      .then(db => {\n        return Q.npost(\n          db.collection(collection), \"find\", options\n        )\n          .then(cursor => {\n            return Q.ninvoke(cursor, \"toArray\"\n            )\n              .then(results => {\n                return results;\n              });\n          });\n      });\n  }\n\n  /**\n   *\n   * @param {string} collection name.\n   * @param {object} object to be inserted into the collections\n   * @returns {Q.Promise} returns promise for insertion\n   */\n\n  insert({collection, document}) {\n    document._id = nodeUuid.v1();\n\n    return this.getMongoDBObject()\n      .then(db => {\n        return Q.ninvoke(db.collection(collection), \"insert\", document);\n      });\n  }\n\n  /**\n   *@param {string} collection collection to be used for query\n   *@param {object} query query object which contains body(filter query), fields, limit, skip, sort fields\n   *@returns {Q.Promise} returns promise for read query\n   */\n  remove({collection, query}) {\n\n    return this.getMongoDBObject()\n      .then(db => {\n        return Q.ninvoke(\n          db.collection(collection), \"remove\", query\n        );\n      });\n  }\n}\n"]}